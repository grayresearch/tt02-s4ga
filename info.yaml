--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID
  source_files:        # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. Source files must be in ./src
    - s4ga.v
  top_module:  "s4ga"      # put the name of your top module here, make it unique by prepending your github username

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it.
#
# Here is an example: https://github.com/mattvenn/tinytapeout_m_segments/blob/main/info.yaml
#
# This info will be automatically collected and used to make a datasheet for the chip.
documentation: 
  author:       "Jan Gray"      # Your name
  discord:      "jangray"      # Your discord handle
  title:        "S4GA"      # Project title
  description:  "super slow serial SRAM FPGA"      # Short description of what your project does
  how_it_works: "receives nybble stream of LUTs' config data, serially evaluates LUTs"      # Longer description of how the project works
  how_to_test:  "pending"      # Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  external_hw:  "serial SRAM or FLASH"      # Describe any external hardware needed
  language:     "verilog" # other examples include Verilog, Amaranth, VHDL, etc
  doc_link:     "https://github.com/grayresearch/tt02-s4ga/blob/main/README.md"
  clock_hz:     "?"     # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
  inputs:               # a description of what the inputs do
    - clk               # external clock
    - rst               # +ve sync reset
    - si[0]             # LUT configuration lsb
    - si[1]             # LUT configuration bit
    - si[2]             # LUT configuration bit
    - si[3]             # LUT configuration msb
    - in[0]             # input 0 => LUT 0
    - in[1]             # input 1 => LUT 1
  outputs:
    - out[0]            # output 0 <= LUT N-I+0
    - out[1]            # output 1 <= LUT N-I+1
    - out[2]            # output 2 <= LUT N-I+2
    - out[3]            # output 3 <= LUT N-I+3
    - out[4]            # output 4 <= LUT N-I+4
    - out[5]            # output 5 <= LUT N-I+5
    - out[6]            # output 6 <= LUT N-I+6
    - out[7]            # output 7 <= LUT N-I+7

